# Energy Generation Forecast System - Code and Algorithm Logic

## System Architecture

The system consists of two main components:
1. FastAPI Backend (api.py)
2. Streamlit Frontend (app.py)

Both components share core logic for energy generation forecasting but serve different purposes.

## Core Components

### 1. Weather Service (weather_service.py)
- Handles external weather API integration
- Provides location information and weather forecasts
- Returns structured weather data including:
  * Temperature
  * Wind speed
  * Solar irradiance
  * Location metadata (timezone, name)

### 2. Machine Learning Models

#### Solar Generation Model
- Uses RandomForestRegressor for solar power prediction
- Features:
  * Hour of day (captures daily solar patterns)
  * Day of year (captures seasonal variations)
  * Month (captures long-term weather patterns)
  * Temperature (affects panel efficiency)
  * Solar irradiance (primary factor for generation)

- Training Logic:
  * Generates synthetic training data with realistic patterns
  * Solar generation = solar_irradiance * 0.2 * temperature_efficiency_factor
  * Includes panel efficiency degradation with temperature
  * Uses 1000 synthetic data points for training

#### Wind Generation Model
- Uses RandomForestRegressor for wind power prediction
- Features:
  * Hour of day
  * Wind speed (primary factor)
  * Temperature (affects air density)
  * Month (seasonal wind patterns)

- Training Logic:
  * Uses synthetic data with realistic wind patterns
  * Wind generation = rated_power * num_turbines * terrain_factor * wind_speed_factor
  * Wind speed factor follows industry-standard power curve:
    - Cut-in speed: 3.0 m/s
    - Rated speed: 12.0 m/s
  * Includes terrain effects through terrain_factor

### 3. Confidence Interval Calculation
- Uses ensemble nature of Random Forest
- For each prediction:
  * Collects predictions from all trees in the forest
  * Calculates 5th and 95th percentiles
  * Provides lower and upper bounds for both solar and wind

## Algorithm Flow

1. Data Input
   - Receive location coordinates (latitude, longitude)
   - Specify forecast duration (days)

2. Weather Data Processing
   - Fetch weather forecast data
   - Extract relevant features
   - Normalize data using StandardScaler

3. Feature Engineering
   - Create time-based features (hour, day_of_year, month)
   - Combine with weather parameters
   - Scale features for model input

4. Generation Prediction
   - Run solar and wind models in parallel
   - Calculate confidence intervals
   - Combine predictions for total generation

5. Output Processing
   - Format timestamps
   - Structure response with:
     * Location information
     * Weather conditions
     * Generation predictions
     * Confidence intervals
     * Summary statistics

## API Integration

### Endpoint: GET /forecast/
- Parameters:
  * latitude (-90 to 90)
  * longitude (-180 to 180)
  * days (1-30, default=7)

- Response includes:
  * Location metadata
  * Hourly forecasts
  * Confidence intervals
  * Summary statistics

## Frontend Visualization (Streamlit)

1. Input Interface
   - Location selection
   - Forecast duration
   - Confidence interval toggle

2. Data Display
   - Interactive plots using Plotly
   - Weather conditions subplot
   - Energy generation subplot
   - Total generation subplot
   - Daily generation patterns
   - Energy mix visualization

3. Download Options
   - CSV export
   - JSON format

## Performance Considerations

1. Model Optimization
   - Uses 100 trees in Random Forest
   - Balances accuracy vs computation time
   - Caches weather data when possible

2. Scalability
   - Async API endpoints
   - Stateless design for horizontal scaling
   - Efficient data structures using pandas/numpy

3. Error Handling
   - Validates input parameters
   - Handles weather API failures gracefully
   - Provides clear error messages

## Future Improvements

1. Model Enhancement
   - Integration of real historical data
   - Support for different turbine types
   - Advanced weather pattern recognition

2. Feature Additions
   - Battery storage optimization
   - Grid integration analysis
   - Economic analysis/ROI calculation



-The machine learning model implementation details
-The weather data processing pipeline
-The frontend visualization components
-The API integration specifics

run file:
streamlit run app.py
uvicorn api:app --reload --port 8000



----------"""homepage ui to be devloped"""